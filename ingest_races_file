from pyspark.sql.types import StructType, StructField, StringType,IntegerType
if len(dbutils.fs.mounts()) > 0:
    existing_mount = spark.createDataFrame(dbutils.fs.mounts())
    if existing_mount.filter(existing_mount.mountPoint == '/mnt/azutest1').count() > 0:
        dbutils.fs.unmount('/mnt/azutest1')
        # Mount the directory
configs = {
    "fs.azure.account.auth.type": "OAuth",
    "fs.azure.account.oauth.provider.type": "org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider",
    "fs.azure.account.oauth2.client.id": "c50c7966-497d-4909-8bf6-3eadb7111dc7",
    "fs.azure.account.oauth2.client.secret": 'secret',
    "fs.azure.account.oauth2.client.endpoint": "https://login.microsoftonline.com/f0a8af0f-e316-4dc1-b53c-7705e33daefc/oauth2/token"
}

dbutils.fs.mount(
    source="abfss://azutest@azutest1.dfs.core.windows.net/",
    mount_point="/mnt/azutest1",
    extra_configs=configs
)
display(dbutils.fs.ls("/mnt/azutest1/azutest_raw_data/"))
df = spark.read.format("csv").option("header", "true").option("inferSchema", "True").load("/mnt/azutest1/azutest_raw_data/races.csv")
display(df)
print(df.schema)


from pyspark.sql.functions import col

race_df=df.select(col("raceId").alias("race_Id"),
                  col("year").alias("year"),
                  col("round").alias("round"),
                  col("circuitId").alias("circuit_Id"),
                  col("name").alias("name"),
                  col("date").alias("date"),
                  col('time').alias("time"))     

from pyspark.sql.functions import current_timestamp, lit,to_timestamp,concat

races_with_timestamp_df=race_df.withColumn("ingestion_date",current_timestamp())\
                                      .withColumn("race_timestamp",to_timestamp(concat(col('date'),lit(" "),col('time')),"yyyy-MM-dd HH:mm:ss" ))

select_race_df=races_with_timestamp_df.select(col("race_Id").alias("race_Id"),
                  col("year").alias("year"),
                  col("round").alias("round"),
                  col("circuit_Id").alias("circuit_Id"),
                  col("name").alias("name"),
                  col("ingestion_date").alias("ingestion_date"),
                  col("race_timestamp").alias("race_timestamp"))

display(select_race_df)

display(races_with_timestamp_df

select_race_df.write.mode('overwrite').parquet("/mnt/azutest1/azutest_transformed_data/race")

display(df)






